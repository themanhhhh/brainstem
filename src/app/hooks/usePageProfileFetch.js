'use client';
import { useEffect, useRef } from 'react';
import { useAuth } from '../context/AuthContext';
import { usePathname } from 'next/navigation';

export const usePageProfileFetch = (pageName = 'Unknown Page') => {
  const { fetchProfile, user, profile } = useAuth();
  const pathname = usePathname();
  const timeoutRef = useRef(null);
  const lastFetchPageRef = useRef('');
  const lastFetchTimeRef = useRef(0);
  
  // C·∫•u h√¨nh
  const DEBOUNCE_DELAY = 300; // 300ms debounce
  const MIN_FETCH_INTERVAL = 300000; // 5 ph√∫t minimum interval gi·ªØa c√°c l·∫ßn fetch
  const FORCE_FETCH_PAGES = []; // Lo·∫°i b·ªè force fetch ƒë·ªÉ tr√°nh g·ªçi li√™n t·ª•c

  useEffect(() => {
    console.log(`üîÑ usePageProfileFetch triggered for: ${pageName} (${pathname})`);
    
    // Clear timeout c≈© n·∫øu c√≥
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    // Ch·ªâ fetch n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p
    if (!user && !(typeof window !== 'undefined' && document.cookie.includes('token='))) {
      console.log('‚ö†Ô∏è No user/token found, skipping profile fetch');
      return;
    }
    
    // Debounce ƒë·ªÉ tr√°nh g·ªçi qu√° nhi·ªÅu l·∫ßn khi navigation nhanh
    timeoutRef.current = setTimeout(() => {
      const now = Date.now();
      const shouldForceFetch = FORCE_FETCH_PAGES.some(page => pathname.startsWith(page));
      
      // Ki·ªÉm tra xem c√≥ c·∫ßn fetch kh√¥ng
      const shouldFetch = 
        !profile || // Ch∆∞a c√≥ profile
        shouldForceFetch || // Trang y√™u c·∫ßu force fetch
        lastFetchPageRef.current !== pathname || // Trang m·ªõi
        (now - lastFetchTimeRef.current) > MIN_FETCH_INTERVAL; // ƒê√£ qua th·ªùi gian minimum
      
      if (shouldFetch) {
        console.log(`üöÄ Fetching profile for: ${pageName} (${pathname})`);
        console.log(`   - Reason: ${!profile ? 'No profile' : shouldForceFetch ? 'Force fetch page' : lastFetchPageRef.current !== pathname ? 'New page' : 'Time interval passed'}`);
        
        lastFetchPageRef.current = pathname;
        lastFetchTimeRef.current = now;
        
        // Force fetch cho c√°c trang ƒë·∫∑c bi·ªát, normal fetch cho c√°c trang kh√°c
        fetchProfile(shouldForceFetch);
      } else {
        console.log(`‚è∞ Skipping profile fetch for: ${pageName} (${pathname}) - too soon or same page`);
      }
    }, DEBOUNCE_DELAY);

    // Cleanup function
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, [pathname, user, profile, pageName]); // Lo·∫°i b·ªè fetchProfile kh·ªèi deps ƒë·ªÉ tr√°nh infinite loop

  return { profile, user };
}; 